input {
    elasticsearch {
        hosts => ["elasticsearch:9200"]
        index => "app-dev-*"
        schedule => "*/5 * * * * * America/Sao_Paulo"
        docinfo => true
        query => '
            {
                "query": {
                    "match_phrase_prefix": {
                        "event.type": "event"
                    }
                }   
            }
        '
    }
}

filter {
    json {
        source => "message"
    }

    mutate {
        add_field => {
            "document_id" => "%{[@metadata][_id]}"
        }
    }
}

output {
    elasticsearch {
        hosts => ["elasticsearch:9200"]
        index => "app-entity-dev-%{+YYYY.MM.dd}"

        document_id => "%{[event][data][id]}"
        action => "update"

        scripted_upsert => true
        script_lang => "painless"
        script_var_name => "doc"
        script => '
            def event = params.doc.event;
            def docId = params.doc.document_id;

            // Checks if the document ID has already been processed.
            if (
                ctx._source.containsKey("document_ids") &&
                ctx._source.document_ids.contains(docId)
            ) {
                return;
            }

            // Adds the document ID to the list of processed IDs, to avoid data duplication.
            if (!ctx._source.containsKey("document_ids")) {
                ctx._source.document_ids = [];
            }
            ctx._source.document_ids.add(docId);

            // Testing handling of array of objects.
            if (!ctx._source.containsKey("event_list")) {
                ctx._source.event_list = [];
            }
            ctx._source.event_list.add(event);

            // Testing array sorting of complex objects.
            ctx._source.event_list = ctx._source.event_list.stream()
                .sorted((o1, o2) -> ZonedDateTime.parse(o1.time).compareTo(ZonedDateTime.parse(o2.time)))
                .collect(Collectors.toList());

            // Testing data handling based on a condition.
            if (event.type == "event_started") {
                ctx._source.start_time = event.time;
                ctx._source.start_message = event.data.message;
            } else if (event.type == "event_finished") {
                ctx._source.finish_time = event.time;
                ctx._source.finish_message = event.data.message;
            } else if (event.type == "event_in_progress") {
                def random = event.data.random;

                // Testing number usage.
                if (!ctx._source.containsKey("random_sum")) {
                    ctx._source.random_sum = 0;
                }
                ctx._source.random_sum += random;

                // Testing array sorting.
                if (!ctx._source.containsKey("sorted_random")) {
                    ctx._source.sorted_random = [];
                }
                ctx._source.sorted_random.add(random);
                ctx._source.sorted_random = ctx._source.sorted_random.stream()
                    .sorted((o1, o2) -> o1.compareTo(o2))
                    .collect(Collectors.toList());
            }

            // Testing datetime comparison.
            if (
                !ctx._source.containsKey("last_event_time") ||
                (ZonedDateTime.parse(ctx._source.last_event_time).isBefore(ZonedDateTime.parse(event.time)))
            ) {
                ctx._source.last_event_time = event.time;
                ctx._source.last_event_type = event.type;
                ctx._source.last_event_data = event.data;
            }

            // Testing datetime diff method.
            if (
                ctx._source.containsKey("start_time") &&
                ctx._source.containsKey("finish_time")
            ) {
                def start = ZonedDateTime.parse(ctx._source.start_time);
                def finish = ZonedDateTime.parse(ctx._source.finish_time);
                ctx._source.total_time = ChronoUnit.SECONDS.between(start, finish);
            }
        '
    }
}